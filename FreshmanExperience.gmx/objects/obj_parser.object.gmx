<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
//fileName = ""
file = file_text_open_read(working_directory + fileName);
index = 0;
isText = false;
text = "";
writing = false;
writingIndex = 0;
writingSpeed = 0.5;
lastCharacter = 0;
name = "";
lines[0] = "";
if (file == -1) {
    show_debug_message("Couldn't find file");
    exit;
}
var i = 0;
while (!file_text_eof(file)) {
    lines[i] = file_text_readln(file);
    ++i;
}
file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move ON
if(writing)
    writing = false;
else
    isText = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parses Lines Array
if (file != - 1) {
    var size = array_length_1d(lines);
    while (!isText &amp;&amp; index &lt; size) {
        var line = lines[index];
        
        //Character
        if (string_char_at(line, 0) == 'C') {
            var indexStr = string_char_at(line, 3);
            switch (indexStr) {
                case 'A': lastCharacter = 10; break;
                case 'B': lastCharacter = 11; break;
                case 'C': lastCharacter = 12; break;
            }
            if (string_digits(indexStr) != "") {
                lastCharacter = real(indexStr);
            }
            var char = find_character(lastCharacter);
            if (!instance_exists(char)) {
                char = create_character(lastCharacter);
            }
            name = char.name;
        }
        
        //Text
        var textPos = 2 + string_pos("T:", line);
        if (textPos != 2) {
            text = string_copy(line, textPos, string_length(line) - textPos + 1);
            isText = true;
            writing = true;
            writingIndex = 0;
            with (find_character(lastCharacter)) {
                talkOffset = pi;
            }
        }
        
        //Position
        var pos = 2 + string_pos("P:", line);
        if (pos != 2 || string_char_at(line,0) == "P") {
            with (find_character(lastCharacter)) {
                position = real(string_char_at(line, pos));
            }
        }
        
        //Emotions
        var pos = 2 + string_pos("E:", line);
        if (pos != 2 || string_char_at(line,0) == "E") {
            with (find_character(lastCharacter)) {
                image_index = real(string_char_at(line, pos));
            }
        }
        //Increment Index
        ++index;
    }
    //Terminating Condition
    if (index &gt;= size) {
        event_perform(ev_other, ev_user0);
    }
}

//Drawing Sprite
var flr = room_height*0.7;
with (obj_character) {
    talkOffset = max (talkOffset -0.2, 0);
    if (currentPosition == 0) {
        var xPos = array_create(4);
        xPos[1] = -sprite_get_width(sprite_index)*2;
        xPos[2] = room_width*0.5;
        xPos[3] = room_width+sprite_get_width(sprite_index)*2;
        var yPos = array_create(4);
        yPos[1] = flr;
        yPos[2] = room_height+sprite_height;
        yPos[3] = flr;
        
        //Teleporting TO Move in
        if (position != 0) {
            x = xPos[position];
            y = yPos[position];
            prevPosition = currentPosition;
            currentPosition = position;
        } else {
        //Moving Out
            if (prevPosition != 0) {
                x = lerp(x, xPos[prevPosition], 0.025);
                y = lerp(y, yPos[prevPosition], 0.025);
            }
        }
    } else {
        //Lerp to Current Position
        var offset = room_width*0.24;
        var xPos = array_create(4);
        xPos[2] = room_width*0.5;
        xPos[1] = xPos[2] - offset;
        xPos[3] = xPos[2] + offset;
        var yPos = array_create(4);
        yPos[1] = flr;
        yPos[2] = flr;
        yPos[3] = flr;
        
        //Moving To THe RIght Position
        if (position != 0) {
            x = lerp(x, xPos[position], 0.085);
            y = lerp(y, yPos[position] - sin(talkOffset)*40, 0.085);
        }
        if (currentPosition != position) {
            prevPosition = currentPosition;
        }
        currentPosition = position;
        if (x != room_width*0.5){
            image_xscale = (sign(x - room_width*0.5));
        }
    }
}

//Animating Writing
if (writing) { 
    writingIndex = min(writingIndex+writingSpeed, string_length(text));
    writing = (writingIndex &lt; string_length(text));
} else {
    writingIndex = string_length(text);
}

//Textbox 
var pad = 10;
var y1 = room_height * 0.7;
var y2 = room_height;
var x1 = 0;
var x2 = room_width;
x1 += pad; x2 -= pad; y1 += pad; y2 -=pad;
draw_set_color(c_black);
draw_set_font(fnt_text);
draw_set_halign(fa_left);
draw_rectangle(x1, y1, x2, y2,false);
//Name Head
draw_rectangle(x1+pad, y1-pad-string_height(name), x1+pad*2+string_width(name), y1, false);


draw_set_color(c_white);
draw_set_valign(fa_top);
draw_text_ext(x1+pad*3,y1+pad*3, string_copy(text,0,round(writingIndex)), 28, room_width-pad*8);
draw_set_valign(fa_bottom);
draw_set_font(fnt_name);
draw_text(x1+pad + pad*0.5, y1-pad*0.5, name);




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart
room_goto(rm_frontend)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle Fullscreen
window_set_fullscreen(!window_get_fullscreen());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move ON
if(writing)
    writing = false;
else
    isText = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
